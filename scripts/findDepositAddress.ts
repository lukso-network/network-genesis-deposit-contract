import { Worker, isMainThread, parentPort } from "worker_threads";
import { ethers } from "ethers";
import { writeFileSync, appendFileSync } from "fs";
import { calculateCreate2 } from "eth-create2-calculator";

import { bytecode } from "../artifacts/contracts/LUKSOGenesisValidatorsDepositContract.sol/LUKSOGenesisValidatorsDepositContract.json";

const from = "0x4e59b44847b379578588920ca78fbf26c0b4956c";
const targetAddressPattern = /^0x420{3,5}1?(cafe)?/i;
const workerCount = 8; // Adjust this based on your CPU core count
const iterationsPerWorker = 1_000_000; // Number of random salts generated by each worker

if (isMainThread) {
  const startTime = new Date();
  console.log(`Started at: ${startTime}`);

  writeFileSync("salt.txt", ""); // Empty the salt.txt file

  const startNextWorker = (workerIndex: number) => {
    const worker = new Worker(__filename);
    worker.postMessage({
      from,
      bytecode,
      targetAddressPattern,
      iterations: iterationsPerWorker,
    });

    worker.on("message", (message) => {
      if (message.found) {
        appendFileSync(
          "salt.txt",
          `${message.salt}: ${message.calculatedAddress}\n`
        ); // Write the salt to the salt.txt file
        console.log(
          `Salt found: ${message.salt} with address: ${message.calculatedAddress}`
        );
      } else {
        console.log(`Worker finished iterations for worker ${workerIndex}`);
        startNextWorker(workerIndex); // Restart the same worker
      }
    });
  };

  for (let i = 0; i < workerCount; i++) {
    startNextWorker(i);
  }
} else {
  parentPort!.on("message", (message) => {
    const { from, bytecode, targetAddressPattern, iterations } = message;

    let salt: string;
    let calculatedAddress: string;

    for (let i = 0; i < iterations; i++) {
      salt = ethers.utils.hexlify(ethers.utils.randomBytes(32)); // Generate a random bytes32 salt
      calculatedAddress = calculateCreate2(from, salt, bytecode);

      if (targetAddressPattern.test(calculatedAddress)) {
        parentPort!.postMessage({ found: true, salt, calculatedAddress });
      }
    }

    parentPort!.postMessage({ found: false });
  });
}
